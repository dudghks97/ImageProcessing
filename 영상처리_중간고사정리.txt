=======================================
<2> numpy 정리
numpy 정리

1. np.info() - 도움말 출력
2. shape(a, b) -> axb 행렬임을 뜻함
3. ndim = 2 -> 2차원 행렬

4. 기본적인 array 선언
	1)
		parm = [[1, 2, 3], [4, 5, 6]]
		a = np.array(parm)

	2)
		a = np.array(parm, dtype = float)
		#내부 요소를 float형으로 강제변환
		
		*parm2 = ([1.5, 2, 3], (4, 5, 6)) 의 경우 자동으로 내부 요소 전체를 float형으로 본다.


5. array 곱(행렬의 곱)
- shape가 각각 (1, 3), (3, 1)인 행렬 a, b를 a@b하면 (1, 1)행렬이 되며 곱셈처리가 됨


6. reshape

a = np.arange(5).reshape(5) => 1차원배열 [0, 1, 2, 3, 4]
b = np.arange(5).reshape(1,5) => 1X5배열 [[0, 1, 2, 3, 4]]

c = np.arange(24).reshape(2, 4, 3) => 3차원배열	

0 1 2
3 4 5
6 7 8 
9 10 11

12 13 14
15 16 17 
18 19 20
21 22 23

형태가된다.


7. copy() 명령어를 사용하면 새로운 객체가 생성된다 -> 데이터 공유x
  ex) a = np.arange(2*3)
       b = A.reshape(2,3) (b와 a는 데이터를 공유하여 a배열이 바뀌면 b또한 바뀜
       c = A.reshape(2,3).copy() -> 새로운 객체 생성(데이터 공유x)


8. resize() - 원본 자체의 값을 바꾼다. 참고로 반환값은 없다.

resize할 크기가 원본이랑 같으면 행과열을 열X행 방식으로 변환
크기가 다르면 원본기준으로 잘라낸다.


9. ravel() - 배열을 1차원으로 나열


10. 랜덤 난수 생성법
import random
1. a = random.randint(0, 10) => a는 0~10 값중 랜덤(np.random.randint(0, 10)이라 써도 무관)
	-> rand'int'이기 때문에 정수형만 나온다.

2. b = np.random.randn(x, y) => x*y 크기의 가우시안 표준 정규 분포를 따르는 난수 생성
   (가우시안 표준 정규 분포는 기댓값이 0이고 표준편차가 1인 분포)

3. c = np.random.uniform(x, y, size=(a, b)) => x~y 사이의 난수를 aXb 배열로 생성


11. 행렬의 곱셈
AXB = np.matmul(A, B) = np.dot(A, B) = AXB

12. clip()
numpy.clip(array, min, max)
array 에 대해서 min보다 작은 값 = min
	       max보다 큰 값 = max
min max를 정해주는 함수
=========================================================================
<3> pyplot 정리
    plt.figure(num='window title')
        : 'window title'로 이름 붙여진 새로운 창을 하나 생성해 낸다.
    plt.subplot(221) => 221의 일반화 => nmk
        : 창을 n개의 row, m개의 column으로 나눈 수 k번에 창을 지정한다. 이후 imshow(), plot() 등으로 그림을 그린다.
    plt.imshow(img)
        : 영상 array img를 화면에 출력하지만 non-interactive mode에서는 이것만으로는 영상이 출력되지 않는다.
        : interactive mode에서는 화면에 출력하고 마우스 혹은 키보드를 입력하면 다음 줄로 넘어간다.
    plt.show()
        : non-interactive mode에서는 plt.imshow()를 수행할 때 화면에 출력된다.
        : 창을 닫지 않으면 닫을 때까지 기다린다. 창을 닫아야 다음 줄로 넘어간다.
    plt.title('Original')
        : 출력한 그림 위에 타이틀을 출력한다.
    plt.axis('off')
        : 가로, 세로의 눈금을 과 대표 값들을 표시하지 않는다.
    plt.ion()
        : interactive mode로 설정한다. plt.show() 없이 plt.imshow()만으로 출력된다.
    plt.waitforbuttonpress()
        : interactive mode 사용시 키 혹은 버튼 입력을 기다린다.
==========================================================================
<3주차정리>
1. CV_00_x_*
opencv 모듈을 통한 영상 파일 읽고 쓰기
- cv.imreadfilename, flags) => filename : 파일명 / flags : 읽기 모드 0 = Gray, 1= Color, -1 = Unchanged
- cv.imshow(title, img)
- cv.imwrite(filename, img)

2. CV__01
반전(역상) 출력 : imageR = 255 - image

화면 밝기 조절 
1) 밝게 : image1 = image*1.5
2) 어둡게 : image2 = image/1.5

*image의 데이터타입이 float형이어야 한다. imageF = image/255 연산 필요

cv.threshold() 메소드 : 255보다 큰 값을 255로 표현
ex) cv.threshold(src, dst, thresh, maxval, type) 
=> src : 입력파일명, dst : 출력파일명, thresh : threshold 값, maxval : , type : ThRESH_TRUNC

단계2의 오류와 같이 uint8의 데이터가 float64로 변환이 되어버림 => 이런식으로 밝기 조정하지말고
# 위의 오류는 다음과 같이 해결이 가능함
1) np.clip 사용
image1 = (np.clip(255*(image/255 * 1.5), 0, 255)).astype('uint8')
image2 = np.clip(255*(image/255 / 1.5), 0, 255).astype('uint8')

2) cv.threshold 사용
cv.threshold() 메소드 : 255보다 큰 값을 255로 표현
ex) cv.threshold(src, dst, thresh, maxval, type) 
=> src : 입력파일명, dst : 출력파일명, thresh : threshold 값, maxval : , type : THRESH_TRUNC
THRESH_TRUNC 가 thresh 이상의 모든 값을 thresh 값으로 바꿈

3. CV_02_ColorImage
영상의 RGB 데이터 분할
1) split, merge 메소드
r, g, b = cv.split(img) : r, g, b 분할
img = cv.merge(r, g, b) : r, g, b 합병

2) python 슬라이싱
imgR = imgBlank.copy(); imgR[:, :, 0] = img[:, :, 0]    # r
imgG = imgBlank.copy(); imgG[:, :, 1] = img[:, :, 1]   # g
imgB = imgBlank.copy(); imgB[:, :, 2] = img[:, :, 2]    # b

3) plt.imshow(img, cmap)
cmap 에는 다양한 종류가 있음 그때그때 필요한거 찾아서 쓰면 될듯함

4. CV_03_Slicing
new_img = img => 원본 손상의 여지가 있음(메모리 공유)
new_img = img.copy() => 원본 손상의 여지가 없음(새로운 객체 생성)

(1) 이미지 슬라이싱(그냥 파이썬 슬라이싱 생각하면 됨)
img[row, col, ch]
img[:, col//2:] => 우측 반
img[:, :col//2] => 좌측 반

img[row//2:, :] => 하단 절반
img[:row//2, :] => 상단 절반

5. CV_04_1_video_read_make_time_lapse
(1) VideoCapture 관련 메소드 (공모전하면서 많이 본 친구들)
    videoCapture=cv.VideoCapture(): 비디오 객체(읽기용)를 생성한다.
    cv.VideoCapture.get(): 읽을 비디오 파일(비디오 객체)의 속성을 출력한다.
    cv.VideoWriter_fourcc(): 쓰기 용의 비디오 영상 코덱을 지정한다.
    쓰기용 객체=cv.VideoWriter(): 쓰기용의 비디오 객체를 생성한다.
    frame=videoCapture.read(): 한 프레임의 영상을 반환한다.

(2) 관련 파라미터(get(), set())
    CAP_PROP_FPS - frame per second
    CAP_PROP_FRAME_WIDTH, CAP_PROP_FRAME_HEIGHT - 영상의 가로, 세로 정보
    CAP_PROP_FOURCC - 4문자로 이루어진 CODEC.비디오 압축 및 해제 알고리즘
    CAP_PROP_FRAME_COUNT - 파일 안에 담긴 총 프레임 수
    CAP_PROP_POS_FRAMES - 현재 프레임 개수

(3) FPS(Frame Per Second)
원본 : 30 -> 수정본 : 60
결과 => 재생시간 2배 단축
※ 3주차 완료
=========================================================================
<4주차 정리>
1. CV_04_2_video_read_Jump_between_frames
비디오의 특정 프레임 추출

2. CV_04_3_video_read_play_backwards
역재생 방법 : 시작 프레임 = 맨 마지막 프레임 - 1
프레임 감소를 통해 역재생을 함
fps = capture.get(cv.CAP_PROP_FPS)
1000/(fps) => 프레임의 간격

3. CV_05_1_ROI
ROI(Region Of Interset)
영상에서 특정 영역을 마우스 드래그로 선택함
opencv에서는 selectROI 메소드로 해당 기능을 제공함

ROI로 선택한 영역 정보를 반환
selected = False
while selected == False:
    x, y, w, h = cv.selectROI(msg_str, img, showCrosshair=False)
    if x == 0 and y == 0 and w == 0 and h == 0:  # x좌표. y좌표, 넓이(가로). 높이(세로)
        print("'c' seems to be pressed...")
        continue
    else:
        print(f'ROI: x={x}, y={y}, w={w}, h={h}')
        break

roi = img[y:y + h, x:x + w]  # 원본 영상의 선택된 부분을 roi 변수 어레이에 복사해 넣는다.
위 드래그한 영역에 대한 정보를 저장함

cv.hconcat([img1, img2]) => 가로로 이어붙이기
cv.vconcat([img1, img2]) => 세로로 이어붙이기

4. CV_06_1_USB_Camera_Display
5. CV_06_2_USB_Camera_Saving
위 두 파일은 cv.VideoCapture 를 통해 로컬 컴퓨터에 연결된 카메라 영상을 다루는 파일들

6. CV_07_Trackbar_1,2
트랙바. 1번에서 발생하는 문제점을 해결한 것이 2번
딱히 적어둘만한건 없고 그때그때 가서 보면 될듯함(2번만)

트랙바 생성(아래는 Red 예시)

cv.createTrackbar ('R', 	# 트랙바 앞에 표시될 트랙바의 이름
    'image',	# 트랙바가 나타날 창의 이름
    0,			# 시작 당시의 슬라이더의 초기 위치
    255,		# 슬라이더의 최댓값. 최솟값은 0으로 고정.
    callBack_R)	    # 슬라이더가 움직일 때 호출될 콜백 함수의 이름.
                    # 첫 번째 파라미터: 트랙 바 위치. 두 번째 파라미터: 사용자 데이터.

7. CV_08_1_resize_flip_concat
영상의 크기 변화 : resize()
1) 고정된 크기 지정 방식
cv.resize(img, (x, y))
2) 비율(fx, fy) 로 지정
cv.resize(img, dsize=(0, 0), fx, fy)

영상 뒤집기
cv.flip(img, filpCode)
filpCode : 대칭 방향 지정
1 = 좌우 대칭, 0 = 상하 대칭, -1 = 좌우 & 상하 대칭

8. CV_08_2_Drawing_2d_primitives_with_keyInputs
다음 글자 선택에 따라 화면의 임의 위치에 도형을 그리거나 문자를 쓴다.
# p : circle 함수를 이용하여 10개의 파란 색 점(반지름 3)을 그린다.
# l : line 함수를 이용하여 초록 색 선을 1개 그린다.
# r : rectangle() 함수를 이용하여 붉은 색 사각형을 그린다.
# e : ellipse() 함수를 이용하여 남색 타원형을 그린다.
# t : text 'OpenCV'를 임의 색상으로 화면에 쓴다.
# c : 화면에서 그린 도형, 문자를 모두 지운다. 이후 새로 그릴 수 있다.
# esc: 프로그램 종료

key = cv.waitkey()
key = ord(key)		=> ex. key = ord('p') : circle 함수 호출

# 그리기에 사용된 함수들
cv.circle
cv.line
cv.rectangle
cv.ellipse
cv.putText
※ 4주차 완료
=========================================================================
<5주차 정리>
# 필터링 : 영상에서 필요한 성분을 커널(필터)을 이용해 추출해 내는 동작
# 공간 필터링(spartial filtering) : 필터 커널과 선형 필터링 연산으로 이루어짐
   주변 화소의 값(f(x, y)) x 커널 계수 값(c1 ~ c9)
# 코릴레이션 연산(=선형 필터링 연산)
# 컨벌루션 연산 : 어떤 커널을 이용해 컨벌루션 결과를 얻고자 한다면, 
	         그 커널을 중심 대칭하여 만든 커널을 이용하여
	         코릴레이션 연산을 하면 컨벌루션의 결과가 얻어짐

# DIP에서 코릴레이션과 컨벌루션은 연산 방식은 다르나, 혼용에서 쓰임
이유 : DIP에서는 대부분의 커널이 중심점 대칭인 커널을 사용하기 때문.
중심점 대칭인 커널을 사용하여 코릴레이션한 결과 == 컨벌루션 결과
위 세개의 연산 방식은 pdf 5p 참조.

# 평균화 커널을 이용한 필터링
평균화 커널 : 계수의 값이 모두 같고 그 모든 계수들의 합이 1인 커널
적용 시 동작 : 중심점 위치의 필터링 값을 얻기 위해 커널 내에 위치한 인접화소의 값을 동일한 비중으로
	     가중평균하는 동작이 수행됨
ex) np.ones((N, N), np.float32)
적용 결과 => 흐릿한 영상(블러링) 커널의 크기(N, N)가 커질수록 흐릿해지는 정도가 심해짐


1. sf1_averaging_filter2D
    코릴레이션 연산을 행하는 함수, filter2D (2차원 커널을 입력으로 받음)
    dst	= cv.filter2D(src, ddepth, kernel[, dst[, anchor[, delta[, borderType]]]])
	src : 입력 영상
	dst : 출력 영상
	ddepth : 출력 영상의 희망하는 depth
	kernel : 컨볼루션 커널, 2차원 행렬
	anchor : 커널의 상대적 중심점의 위치. default : (-1, -1)
	delta : 코릴레이션 연산 수행의 처리 결과(dst에 더해질 값)
	bordertype : 존재하지 않는 영역의 화소값을 가정하는 방법
boderType 옵션 종류
cv.BORDER_REPLICATE : 영상의 경계 부분에 있는 화소 값이 존재하지 않는 부분에 반복되어 있다고 가정함
cv.BORDER_ISOLATED : zero-padding 이라고 보면 될듯함. 0을 채워넣음
cv.BORDER_DEFAULT : 거우로가 같이 대칭된 화소들이 있는 것을 가정함
＊ 관련 상세는 pdf(그림으로 나와있음)


2. sf2_*_gaussian*d_draw_on_*D
가우시안 함수 : 표준편차(시그마)의 값이 클수록 중심 값에서 넓은 분포를 갖고, 작을수록 중심 값에 집중됨

가우시안 커널 함수
cv.getGaussianKernel(ksize, sigma, ktype) => 2차원 커널을 반환함
ksize : kernel 사이즈
sigma : 가우시안 표준 편차
ktype : filter type CV_32F / CV_64F 가 될수있음

3. sf4_GaussianBlur
가우시안 블러링 : 중심에 가까운 화소는 가중치를 높이고 중심에서 먼 화소의 가중치는 낮추는 방법으로
	         가중 평균을 행함. 사람이 피사체를 멀리서 바라볼 때 일어나는 현상과 유사함.
가우시안 블러링 메소드
cv.GaussainBlur(src, ksize, sigmaX[, dst[, sigmaY[, borderType]]])
src : 입력 이미지
dst : 출력 이미지
ksize : 가우시안 커널의 크기
sigmaX : X 방향으로의 표준편차
sigmaY : Y 방향으로의 표준편차
borderType : 존재하지 않는 영역의 화소값을 가정하는 방법

예시
1) 양방향 블러링 예시, 시그마를 제시하고, 커널의 크기는 적절하게 자동 선정함. : 추천방식
blur = cv.GaussainBlur(img, (0, 0), 9) # 시그마 = 9 의 값으로 양방향 블러링
blur = cv.GaussianBlur(src=img, ksize=(0, 0), sigmaY=sigma, sigmaX=sigma) # 키워드 제시, 시그마 둘 다 지정
blur = cv.GaussianBlur(src=img, ksize=(0, 0), sigmaX=9) # 키워드 제시, sigmaX만 지정했지만 Y도 동일하게 블러링

2) 한쪽 방향으로만 블러링 : sigmaX / sigmaY 중 하나만 지정 및 ksize도 적절히 지정
blur = cv.GaussianBlur(src=img, ksize=(N, 1), sigmaX=sigma) # X(가로) 방향의 블러링
blur = cv.GaussianBlur(src=img, ksize=(1, N), sigmaX=0, sigmaY=sigma) # Y(세로) 방향의 블러링

3) 커널 사이즈를 제시하고 자체적으로 적당한 시그마 계산
blur = cv.GaussianBlur(img, (41, 41), 0)	# 양방향 블러링
blur = cv.GaussianBlur(img, (41, 1), 0)	# X(가로) 방향 블러링
blur = cv.GaussianBlur(img, (1, 41), 0)	# Y(세로) 방향 블러링

4) 지양해야하는 방식
blur = cv.GaussianBlur(src=img, ksize=(51, 51), sigmaX=1)	# 시그마에 비해 커널의 크기가 큼 => 연산 낭비
blur = cv.GaussianBlur(img, (3, 3), 15)	# 시그마에 비해 커널의 크기가 작음 => 결과가 부정확할 수도 있음
ㄴ 어두운 영상을 만들어내기도함

4. sf5_filter2d_sepFilter2D
2차원 필터링한 결과가 가로방향으로 1차원 필터링한 결과 영상을 다시 세로 방향으로 1차원 필터링한 결과와 같으면
이 2차원 필터링 연산을 선형 분리 가능하다고 함.
평균 필터와 가우시안 필터 : 선형분리가능 필터

cv.sepFilter2D(src, ddepth, kernelX, kernelY[, dst[, anchor[, delta[, borderType]]]])
src : 입력 이미지
dst : 출력 이미지
ddepth : 출력 이미지의 depth
kernelX : 각 행에 대한 계수
kernelY : 각 열에 대한 계수
anchor : 커널의 중심점 (-1, -1) 이 디폴트 값

filter2D 와 sepFilter2D 함수의 수행 속도 비교
큰 필터를 사용할수록 DFT 변환을 사용하는 filter2D 함수가 유리함
필터의 크기가 작은 경우 sepFilter2D가 유리함
※ 5주차 완료
=========================================================================
<6주차 정리>
에지 : 영상의 급격한 변화가 일어나는 화소들의 집합
미분 : 영상처리에서의 미분은 x축이나 y축으로 한칸 이동하면서 생기는 계조의 변화

1. P_cv.imshow_plt.imshow (그냥 둘 다 출력해보는 방안이 제일 좋아보임)
    1) pyplot.imshow
        1채널, 부동소수 영상은 부호가 있는 수를 표현할 때 매우 편리하다.
            데이터의 범위나 자료형에 영향 받지 않고 최소, 최대를 구해 자체 정규화하여 출력한다.
        cmap 파라미터의 설정에 따라 여러 color map을 활용한 영상 출력을 시도할 수 있다.
        cv.imshow() 처럼 흑백 모노 그레이로 표현하려면 cmap='gray'로 설정하여야 한다.
        그렇지 않으면 default pseudo color map이 선택되어 칼라로 1채널 영상이 출력된다.
        - 개인적으로 따로 공부하기 바람.
    2) cv.imshow() 함수의 출력 범위
       부동소수 데이터: 0~1의 값만 출력한다. 음수는 0으로 간주하고 1을 넘는 값은 1로 간주한다.
       정수형 데이터: 0~255만 출력한다. signed int도 unsigned number로 간주한다.
       부동소수 혹은 unit8만 받아들인다.
       uint8이면 연산 중 발생한 8비트를 넘거나 음의 정수도 모두 하위 8비트만 취하여 출력한다.

2. Eg1_Sobel_cv, Eg1_Sobel_plt
★ 소벨 연산자 : 중심화소에 2배의 가중치를 부여하고 주변에 가우시안 블러링을 시행한 후 가로/세로 방향으로
                     1차 미분을 수행한 것과 유사한 효과를 가짐
cv.Sobel(src, ddepth, dx, dy[, dst[, ksize[, scale[, delta[, borderType]]]]])
src : 입력 이미지
dst : 출력 이미지
ddepth : 출력 영상의 ddepth. -1 = 입력과 같은 depth
	uint8 입력에는 에지 연산에는 –1 옵션이 적절치 않다. 연산 결과가 음수 값을 가질 수 있고 
	255를 넘은 결괏값들이 있을 수 있기 때문
dx : x미분
dy : y미분
kszie : 커널 사이즈. 1, 3, 5, 7 이 되어야함. 1이면 커널의 크기는 3이되며, 중앙값의 계수도 주변과 같게 설정됨
	=> 가우시안 블러링 효과는 비추천함
scale : 반환되는 에지의 양을 시각적으로 강화하고자 할 때 사용할 경우가 있음. default : 적용 x

사용 예시
(1) x방향으로 미분. 실제로는 세로축 에지 선을 구성하게됨
1) x축 에지. dx=1, dy=0: x방향으로만 미분함을 의미한다. 
# 출력결과는 CV_64F 부동소수이다. 
sobelx = cv.Sobel(img, cv.CV_64F, 1, 0, ksize=k)

2) 위와 같은 동작. keyword를 지정하면 순서를 바꾸어도 상관없다. 
sobelx = cv.Sobel(img, cv.CV_64F, dy=0, dx=1, ksize=k)

3) 아래는 ddept=-1이므로 img의 데이터 형에 따른다. 
# 주의: 만약 img가 uint8 타입이라면 결과가 음수를 담을 수 없으므로-1을 사용하면 안 된다. 
sobelx = cv.Sobel(img, -1, dy=0, dx=1, ksize=k)

(2) y방향으로 미분. 실제로는 가로축 에지 선을 구성하게됨
1) y축 에지. dx=0, dy=1
sobely = cv.Sobel(img, cv.CV_64F, 0, 1, ksize=k)    # y축 에지. dx=0, dy=1: y방향으로만 미분함을 의미한다.

(3) x,y방향으로 미분 : 두 값을 합쳐서 얻음
abs_sobel_both = np.abs(sobelx)+np.abs(sobely)      # 올바른 방법

+ 성분과 - 성분 분리 : 계조 변화를 관측 할 수 있음
+ 성분 : 어두운 화소에서 밝은 화소로
- 성분 : 밝은 화소에서 어두운 화소로

2. Eg2_1_KernelBased_filter2D_plt
    edgeV는 가로 방향으로 소벨 미분을 구하는 kerH 커널로,
    edgeH는 세로 방향으로 소벨 미분을 구하는 verV 커널로 2차원 선형 필터링으로 구해서 에지 영상을 만들어 낸다.
    가로 방향의 미분은 세로 방향의 에지를 만들어 내고,
    세로 방향의 미분은 가로 방향의 미분을 만들어 낸다.

(1) 에지의 강도를 부호와 크기를 고려하여 화면에 출력하기 위한 방안
1) 미분 값의 절댓값을 취해 에지 강도만을 화면에 출력 (그다지 도움이 되지는 않는다고함)
2) 음수 혹은 양수 정보만을 취하여 화면에 출력하는 방안
    어두운 곳 -> 밝은 곳의 에지
    밝은 곳 -> 어두운 곳의 에지
    둘 중 하나만 제시

3) 중간 값을 기준으로 음수와 양수의 에지를 표현하는 방안 (선호되는 방안)
부호 구분 가능, 에지 정보도 모두 표현 가능

4) 이진화하여 표현하는 방안
에지 강도가 특정 임계치를 넘으면 1로 표현, 작으면 0으로 처리하여 표현
0,1로 clipping

(2) 실험 결과 정리 ★
1) 음수의 커널 계수를 갖는 필터링 결과 데이터 : uint8의 데이터형으로 수용 불가능
    => 입력 영상을 0~1의 범위를 갖는 부동소수형을 사용할 것을 추천(정규화된 데이터)
2) 에지 데이터 : 보통 절댓값을 취하여 화면에 표시하는 것이 일반적임
3) 에지 출력 시 반드시 최대 최솟값으로 나누어 정규화할 필요는 없음
    정규화 할 경우 에지 성분이 강한 곳을 발견하기 어려울 수 있음
4) plt.imshow() 와 1채널 부동소수 사용 시 한 화면에 음수와 양수 성분을 구분하여 동시에 표현 가능함
    x,y 양방향 출력은 부정확한 표현이 일어날 수 있음
5) ply.imshow() 메소드는 1채널 부동소수 영상에 대해서 내부에 스케일링 기능이 포함되어잇음
   컬러에 대해서는 정규화 처리를 하지 않으나, 모노에 대해서는 정규화 처리를 진행함
6) cv.imshow() 메소드는 부동소수 데이터형에 대해서는 0~1의 값으로 정규화되어있을것을 전제함
    음수의 경우 0으로, 1을 넘으면 1로 threshold 됨

3. Eg2_2_BinaryEdge3
에지 강도를 이진화하여 표현하는 방안

4. Eg3_KernelBased2D_Laplacian
2차 미분 - 라플라시안 필터링
2차 미분 : 1차 미분의 결과에 대해 1차 미분을 진행하여 이루어짐

cv.Laplacian(src, ddepth[, dst[, ksize[, scale[, delta[, borderType]]]]])
2차미분함수
src : 입력 영상
ddepth : 출력 영상의 depth
ksize : 커널 사이즈. 1이면 3x3 커널

상기 프로그램의 목적은 2차 미분에 의한 이진화 기법의 활용 가능성에 대한 문제점 지적을 위함
쓸 만한 결과가 있어보이지만 아니라는것.

5. Eg4_DrawLoGkernel_Apply
LoG(Laplacian of Gaussian)
1차 미분의 이진화 작업의 문제점 : 적당한 임계값을정하기가 어려운 문제

해결방안 : 2차 미분은 1차 미분의 극점에서 0을 갖는다는 사실을 이용
2차 미분의 영점 교차점 : 임계치 설정의 고민 없이 정확한 에지의 위치를 결정할 수 있게함

미분연산 : 잡음의 영향에 취약한 특성을 지님 => 사전에 가우시안 블러링과 같은 저주파 필터링 연산을 시행함
소벨 연산 : 가우시안 필터링이 내재되어있는 연산

입력 영상에 가우시안 블러링한 결과에 2차 미분을 행하는 동작은 
가우시안에 2차 미분을 취한 커널을 입력 영상에 대해 필터링한 결과와 같음
이유 : 컨벌루션 동작과 2차 미분의 연산이 선형적임
=> LoG커널을 이용하여 1회의 컨벌루션 연산만 소요된다는 유리함을 가짐

6. Eg4_LoG_zero_crossing => 에지의 정확한 위치 파악이 가능함(영점 교차)
시그마가 작으면 가까이서 본 에지
시그마가 크면 멀리서 본 에지

7. ★Eg5_Canny2
캐니에지 : 신뢰성이 높고 활용이 간편한 보편화된 에지 검출 알고리즘

캐니 에지 알고리즘 처리 절차
1) 선형 필터링 : 블러링한 후 이를 1차 미분한 것과 같은 결과를 얻음
2) Non-maximum supprestion 기법 : 에지의 폭을 1픽셀 단위로 축소. 그래디언트의 방향으로 local maximum 여부 판단
3) Hysteresis thresholding of edge strength
두 임계치를 이용하여 이진 영상을 만듦
T_high 보다 큰 그래디언트 값을 갖는 화소 -> 1로 이진화
T_low 보다 작은 그래디언트 값을 갖는 화소 -> 0으로 이진화
둘 사이의 화소는 T_high보다 큰 그래디언트를 갖는 화소에 연결되어있으면 1로 이진화

cv.Canny(image, threshold1, threshold2[, edges[, apertureSize[, L2gradient]]])
ex) edges = cv.Canny(img, T_low, T_high, Size)
threshold1 == T_low
threshold2 == T_high

LoG 에지 검출의 단점 : 가우시안 필터링을 적용하기 때문에 가우시안 필터링의 단점을 가짐
표준편차 값에 의해 결과가 달라짐

6주차 : 에지검출 알고리즘에 대한 내용들이었음

※ 6주차 완료(조시훈 자료보고 추가할거 추가하기)
=========================================================================
<7주차 정리>
명암 변환(Intensity Transform) : 화질 개선등의 목적으로 화소의 계조 값, p를 다룬 값, g(p)로 변환하는 작업
							p : 픽셀 값
매핑 함수 : 특정 화소값, p를 다룬 화소값, p'로 변환하는 함수
명암 변환의 특징 : 변환을 위해 필요한 정보는 현 지점의 화소값 정보가 전부임
입력 화소값만 알고 있으면 변환된 출력 값으로 바로 변환이 가능한 Point Processing 의 한 사례.
LUT(Look Up Table) : 입력 화소값에 대한 변환 값을 미리 연산하여 메모리에 저장하여 구현하는 용도의 메모리
		어레이 변수를 이용하여 구현이 가능함

1. Eh1.1_Gamma_function_plotting, Eh1.2_GammaTransform
* 감마변환(밝기 조절)
0~1로 정규화된 입력에 대해 입력의 감마 지수 승을 취하여 변환하는 처리
output = input^Γ, 	0<=input<=1 (0~1로 정규화된 입력에 대한 변환)

Γ > 1 : 어둡게 처리, 특히 어두운 부분을 더 어둡게. Γ값이 커질수록 더 어두워짐
	ex) 화소값이 255면 감마연산을해도 화소값이 같다. -> 해결방안 x
Γ < 1 : 밝게 처리, 특히 어두운 부분을 더 밝게. Γ값이 작을수록 더 밝아짐
전역적으로 같은 비율로 밝아지는건 아니다. 

* for루프 사용은 좋지 않다.
 시간대비 효율이 안좋아 실용화 x

2. Eh2.1_Sigmoid_function_plotting, Eh2.2_SigmoidTransform
시그모이드 변환 : 명암의 대조비 강화를 위해 사용
입력의 중간 부분보다 작은 값은 더 작아지게 큰 값은 더 커지게 함 => 영상의 대조비 강화
어두운 부분 -> 더 어둡게, 밝은 부분 -> 더 밝게

* 시그모이드 변환식(pdf11)
m : 중심값. threshold라고도함(이 점을 중심으로 밝거나 어둡게 처리함)
     중심값이 커지면 전체 영상은 어두워짐(대부분 큰값보다 작음)
     중심값이 작아지면 전체 영상은 밝아짐(대부분 낮은값보다 큼)
w : 기울기 경사값(?). 범위는 0~1이며 w값이 커질수록 기울기 경사가 급해짐
     강화 강도를 결정함 0: 강화 안함. 1: 강함
E : 함수의 기울기. 클수록 대비가 심해짐
e(epsilon) : 0보다 큰 극히 작은 수를 의미하며, 분모가 0이 되지 않게 하는 용도 

3. 히스토그램과 히스토그램 스트레칭
Eh3.x 시리즈 중 아래가 권장되는 방식
Eh3.1_HistogramShow_np.histogram_plot_bar

* 히스토그램 : 영상의 통계적인 계조 분포
0~255의 픽셀의 각각의 값에 대한 개수를 그래프로 나타냄
가로축으로는 계조값, 세로축에는 해당 계조 값을 갖는 화소의 수

4. ★ Eh4.1_imadjust_function, Eh4.2_HistogramStretching_imadjust
* 히스토그램 스트레칭 : 영상의 대조비를 강화
입력 계조 값의 최소, 최대(low_in, high_in)를 정하여 히스토그램을 양쪽 끝단으로 잡아당기는 작업
low_in 보다 작은 값은 모두 0
high_in 보다 큰 값은 모두 225
계조값의 차이가 강조되는 결과를 가져옴 => 선명한 영상을 얻을 수 있음
문제점 : 영상의 세부정보를 잃을 수도 있음
 imadjust  함수 이용

- 넓은 폭을 사용할 경우 : ?
- 좁은 폭을 사용할 경우 : 특정부분이 진해짐.
 비교해보기

5. ★ Eh5.1_HistogramEqualization, Eh5.2_HistogramEqualization_color, Eh5.3_HistogramSpecification
* 히스토그램 평활화 : 영상의 계조 분포를 고르게하는 작업
		 모든 화소의 분포를 균등하게 만드는 작업
		 균등하지 않으면 분포가 부족한 화소로 표현되는 정보는 가시성이 떨어짐
 -> ㅡ자로 완전 평평하게는 불가능. 하지만 최대한 평평하게는 만들수있다.
    컬러 영상은 평활화 불가능.
1단계 : 히스토그램(계조치 분포함수)을 구함
2단계 : 히스토그램의 누적분포함수를 구함
3단계 : 누적분포함수를 제일 큰 값(화소의 개수)으로 나누어 정규화
4단계 : 정규화 누적 분포함수에 최대화소값를 곱해 반올림한 매핑함수를 만듬
5단계 : 출력화소값으로 변환

cv.equalizeHist() 메소드를 통해 구현함

장점 : 영상의 가시성 향상

문제점 
1. 중간중간에 빈 화소가 존재하게됨
     -> 그라데이션 효과가 부족해짐 -> 영상 품질 저하
2. spike현상 발생 : 특정 화소의 개수가 매우 많을 경우(quantum jump)
    -> 해결책 : jump의 정도를 낮추어 중간에 빈 화소를 줄임 


* 히스토그램의 명세화 : pass(안봐도 됨)
- 히스토그램의 분포를 자기가 원하는대로 바꿀수 있음
- 하지만 이 기법을 사용함으로 얻을 수 있는게...??
- 템플릿 영상의 스타일대로 영상이 변화하는 것으로 이해했음

6. ★ Eh6.SharpeningMask, ★ Eh6.UnSharpeningMasking
영상의 샤프니스(Sharpness)를 증폭하여 영상의 선명도 개선 가능 -> 샤프닝 커널을 사용한 코릴레이션 작업으로 구현
샤프닝 마스크 : 영상의 선명도 개선 기법. 영상의 대조비를 강조하는 필터
마하 효과 : 원함수에 원함수를 2차미분한 함수값을 빼면 명암이 강조되는 효과가 
               발생하는데 이를 마하 효과라 한다.	-> 원함수 - 2차미분(라플라시안 커널)
경계면에서 어두운 부분은 더 어둡게, 밝은 부분은 더 밝게 처리 => 선명한 시각적 효과
프로그램 결과 분석 4-neighbor 보다 8-neighbor 가 더 강하게 처리함

언샤프 마스킹 : 블러링된 영상을 이용하여 영상을 선명하게 만드는 알고리즘
시그마를 이용하여 블러링 특성 제어 -> 강조할 고주파 성분의 특성을 제어함
원본 영상 - 블러 영상 =  언샤프 마스크를 얻음 => 고주파 성분
원본 영상  + 언샤프 마스크(고주파 성분) = 어두운 곳과 밝은 곳의 차이를 더욱 강하게 벌려주는 대조 강화 현상 발생
언샤프 마스크의 특성 : 블러링의 강화 정도에 따라 달라짐 -> 강화할 주파수대의 특성을 결정함

샤프닝 마스크 : 잡음을 강화하는 특성이 있음
언샤프 마스킹 : 위와 같은 부작용이 훨씬 적은 장점이 있음

7. Eh7.MedianFiltering, Eh7_.AddNoise_imnoise
AddNoise : 잡음이 들어간 영상 제작 프로그램
MedianFiltering : 잡음제거

메디언 필터링 : 원본 영상에 스파클(sparkle) 잡음이 있을 경우 이를 효과적으로 제거하는 방법
처리하고자 하는 영역에서 계조값의 중간값으로 중심 화소의 값을 대치함
스파클 잡음과 같이 극한 값을 갖는 잡음 제거가 용이함	# == 소금과 후추 잡음(S&P 잡음)
단순한 블러링 : 스파클 잡음이 그대로 주변으로 확산됨 -> 잡음 제거가 어려움

S&P 잡음 제거는 잘 하는데 가우스 잡음 제거를 잘 못하는 이유?
가우스 잡음은 0 과 1로 이루어진 잡음이 아니기 때문이라고 하셨음.
※ 7주차 완료
=========================================================================
