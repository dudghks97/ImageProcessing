※ 영상처리 정리 ※
<1> 강의 자료 정리
# 2주차
강의내용.PNG에 있음

# 3주차
CV_00_0_ImageShow
CV_00_1_ImageShow
CV_00_2_ImageReadShowWrite
CV_01_SimpleImageProcessingWithError : 강의에서는 안 다룸
CV_02_ColorImage
CV_02_ColorImage_plt
CV_03_1_SlicingOperation
CV_04_1_video_read_make_time_lapse_video

# 4주차
CV_04_2_video_read_Jump_between_frames
CV_04_3_video_read_play_backwards
CV_05_1_ROI
CV_06_1_USB_Camera_DisplayFrames
CV_06_2_USB_Camera_SavingFrames
CV_07_Trackbar_1
CV_07_Trackbar_2
CV_08_1_resize_flip_concat
CV_08_2_Drawing_2d_primitives_with_keyInputs

# 5주차
sf1_averaging_filter2D
sf2_1_gaussian1d_draw_on_2D
sf2_2_gaussian2d_draw_on_3D
sf3_getGaussianKernel_filter2D
sf4_GaussianBlur
sf5_filter2d_sepFilter

# 6주차
★ 소벨 연산자
P_cv.imshow_plt.imshow
Eg1_Sobel_cv
Eg1_Sobel_plt
Eg2_1_KernelBased_filter2D_plt
Eg2_2_BinaryEdge3
Eg3_KernelBased2D_Laplacian
Eg4_DrawLoGkernel_Apply
Eg4_LoG_zero_crossing
★Eg5_Canny2

# 7주차
Eh1.1_Gamma_function_plotting
Eh1.2_GammaTransform
Eh2.1_Sigmoid_function_plotting
Eh2.2_SigmoidTransform
Eh3.x 시리즈 중 아래가 권장되는 방식
Eh3.1_HistogramShow_np.histogram_plot_bar
★ Eh4.x
Eh4.1_imadjust_function
Eh4.2_HistogramStretching_imadjust
★ Eh5.x
Eh5.1_HistogramEqualization
Eh5.2_HistogramEqualization_color
Eh5.3_HistogramSpecification
★ Eh6.SharpeningMask
★ Eh6.UnSharpeningMasking
Eh7.MedianFiltering
Eh7_.AddNoise_imnoise
=======================================
<2> numpy 정리
numpy 정리

1. np.info() - 도움말 출력
2. shape(a, b) -> axb 행렬임을 뜻함
3. ndim = 2 -> 2차원 행렬

4. 기본적인 array 선언
	1)
		parm = [[1, 2, 3], [4, 5, 6]]
		a = np.array(parm)

	2)
		a = np.array(parm, dtype = float)
		#내부 요소를 float형으로 강제변환
		
		*parm2 = ([1.5, 2, 3], (4, 5, 6)) 의 경우 자동으로 내부 요소 전체를 float형으로 본다.


5. array 곱(행렬의 곱)
- shape가 각각 (1, 3), (3, 1)인 행렬 a, b를 a@b하면 (1, 1)행렬이 되며 곱셈처리가 됨


6. reshape

a = np.arange(5).reshape(5) => 1차원배열 [0, 1, 2, 3, 4]
b = np.arange(5).reshape(1,5) => 1X5배열 [[0, 1, 2, 3, 4]]

c = np.arange(24).reshape(2, 4, 3) => 3차원배열	

0 1 2
3 4 5
6 7 8 
9 10 11

12 13 14
15 16 17 
18 19 20
21 22 23

형태가된다.


7. copy() 명령어를 사용하면 새로운 객체가 생성된다 -> 데이터 공유x
  ex) a = np.arange(2*3)
       b = A.reshape(2,3) (b와 a는 데이터를 공유하여 a배열이 바뀌면 b또한 바뀜
       c = A.reshape(2,3).copy() -> 새로운 객체 생성(데이터 공유x)


8. resize() - 원본 자체의 값을 바꾼다. 참고로 반환값은 없다.

resize할 크기가 원본이랑 같으면 행과열을 열X행 방식으로 변환
크기가 다르면 원본기준으로 잘라낸다.


9. ravel() - 배열을 1차원으로 나열


10. 랜덤 난수 생성법
import random
1. a = random.randint(0, 10) => a는 0~10 값중 랜덤(np.random.randint(0, 10)이라 써도 무관)
	-> rand'int'이기 때문에 정수형만 나온다.

2. b = np.random.randn(x, y) => x*y 크기의 가우시안 표준 정규 분포를 따르는 난수 생성
   (가우시안 표준 정규 분포는 기댓값이 0이고 표준편차가 1인 분포)

3. c = np.random.uniform(x, y, size=(a, b)) => x~y 사이의 난수를 aXb 배열로 생성


11. 행렬의 곱셈
AXB = np.matmul(A, B) = np.dot(A, B) = AXB

12. clip()
numpy.clip(array, min, max)
array 에 대해서 min보다 작은 값 = min
	       max보다 큰 값 = max
min max를 정해주는 함수
=========================================================================
<3> pyplot 정리
    plt.figure(num='window title')
        : 'window title'로 이름 붙여진 새로운 창을 하나 생성해 낸다.
    plt.subplot(221) => 221의 일반화 => nmk
        : 창을 n개의 row, m개의 column으로 나눈 수 k번에 창을 지정한다. 이후 imshow(), plot() 등으로 그림을 그린다.
    plt.imshow(img)
        : 영상 array img를 화면에 출력하지만 non-interactive mode에서는 이것만으로는 영상이 출력되지 않는다.
        : interactive mode에서는 화면에 출력하고 마우스 혹은 키보드를 입력하면 다음 줄로 넘어간다.
    plt.show()
        : non-interactive mode에서는 plt.imshow()를 수행할 때 화면에 출력된다.
        : 창을 닫지 않으면 닫을 때까지 기다린다. 창을 닫아야 다음 줄로 넘어간다.
    plt.title('Original')
        : 출력한 그림 위에 타이틀을 출력한다.
    plt.axis('off')
        : 가로, 세로의 눈금을 과 대표 값들을 표시하지 않는다.
    plt.ion()
        : interactive mode로 설정한다. plt.show() 없이 plt.imshow()만으로 출력된다.
    plt.waitforbuttonpress()
        : interactive mode 사용시 키 혹은 버튼 입력을 기다린다.